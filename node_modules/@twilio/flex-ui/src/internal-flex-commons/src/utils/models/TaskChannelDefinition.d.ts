import React from "react";
import { BadgeVariants } from "../../components/BaseBadge/BaseBadge.definitions";
import type { BaseITask } from "./BaseITask";
/**
 * @enum {"Accepted" | "Wrapping" | "Completed" | "Canceled" | "Pending" | "Rescinded"} ReservationStatuses
 * @property {"Wrapping"} Wrapping - wrapping state
 * @property {"Completed"} Completed - completed state
 * @property {"Canceled"} Canceled - canceled state
 * @property {"Pending"} Pending - pending state
 * @property {"Accepted"} Accepted - accepted state
 * @property {"Rescinded"} Rescinded - rescinded state
 * @memberof TaskChannelDefinition
 * @since 2.0.0
 */
export declare enum ReservationStatuses {
    Wrapping = "Wrapping",// wrapping state
    Completed = "Completed",// completed state
    Canceled = "Canceled",// canceled state
    Pending = "Pending",// pending state
    Accepted = "Accepted",// accepted state
    Rescinded = "Rescinded",// rescinded state
    PendingTransfer = "PendingTransfer",// task was transferred to worker is pending action
    Reserved = "Reserved",
    Assigned = "Assigned"
}
export type TaskCallbackType<T> = (task: BaseITask, componentType: React.ComponentType, ...args: Array<any>) => T;
export type TaskStatusBasedTypeBase<T> = {
    [key in ReservationStatuses]?: T;
};
export type TaskStatusBasedType<T = string> = T | TaskCallbackType<T> | TaskStatusBasedTypeBase<T>;
export type TaskSounds = TaskStatusBasedTypeBase<TaskSoundData>;
export type TaskChannelApplicableCb = (task: BaseITask) => boolean;
export type TaskSoundData = {
    url: string;
    repeatable: boolean;
};
export declare enum TaskChannelCapability {
    Info = "Info",// whether channel has info panel
    Call = "Call",// whether channel has call canvas capabilities
    Chat = "Chat",// whether channel has chat canvas capabilities
    Video = "Video",// whether channel has video calling capabilities
    Wrapup = "Wrapup"
}
export interface BaseTaskChannelDefinition {
    name: string;
    colors?: {
        main?: TaskStatusBasedType<string>;
    };
    sounds?: TaskSounds;
    isApplicable: TaskChannelApplicableCb;
    icons?: {
        list?: TaskStatusBasedType<string | React.ReactNode>;
        main?: TaskStatusBasedType<string | React.ReactNode>;
        active?: TaskStatusBasedType<string | React.ReactNode>;
    };
    templates?: {
        IncomingTaskCanvas?: {
            titleLine?: TaskStatusBasedType<string>;
            firstLine?: TaskStatusBasedType<string>;
            secondLine?: TaskStatusBasedType<string>;
        };
        ConnectingOutboundCallCanvas?: {
            titleLine?: TaskStatusBasedType<string>;
            firstLine?: TaskStatusBasedType<string>;
            secondLine?: TaskStatusBasedType<string>;
        };
        CallCanvas?: {
            titleLine?: TaskStatusBasedType<string>;
            firstLine?: TaskStatusBasedType<string>;
            secondLine?: TaskStatusBasedType<string>;
        };
        TaskListItem?: {
            firstLine?: TaskStatusBasedType<string>;
            secondLine?: TaskStatusBasedType<string>;
            extraInfo?: TaskStatusBasedType<string>;
        };
        TaskCanvasHeader?: {
            title?: TaskStatusBasedType<string>;
            secondLine?: TaskStatusBasedType<string>;
            endButton?: TaskStatusBasedType<string>;
        };
        TaskCard?: {
            firstLine?: TaskStatusBasedType<string>;
            secondLine?: TaskStatusBasedType<string>;
        };
        TaskInfoPanel?: {
            content: TaskStatusBasedType<string>;
        };
        TaskCanvasTabs?: {
            contentTabHeader?: TaskStatusBasedType<string>;
        };
        Supervisor?: {
            TaskCanvasHeader?: {
                title?: TaskStatusBasedType<string>;
                secondLine?: TaskStatusBasedType<string>;
                endButton?: TaskStatusBasedType<string>;
            };
            TaskInfoPanel?: {
                content: TaskStatusBasedType<string>;
            };
            TaskOverviewCanvas: {
                firstLine?: TaskStatusBasedType<string>;
                secondLine?: TaskStatusBasedType<string>;
            };
        };
    };
    componentProps: {
        TaskListItem?: {
            Badge?: {
                children: number | ((state: any, props: {}) => number);
                variant: BadgeVariants | ((state: any, props: {}) => BadgeVariants);
            };
        };
        [componentName: string]: {
            [propName: string]: any;
        } | undefined;
    };
    capabilities: Set<TaskChannelCapability>;
    charLimit: number;
}
