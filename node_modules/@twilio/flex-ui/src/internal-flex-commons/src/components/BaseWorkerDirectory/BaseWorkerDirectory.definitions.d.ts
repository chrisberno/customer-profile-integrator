import type { TaskRouterTaskQueue, OutboundFlows } from "@twilio/flex-sdk";
import { ElementType } from "react";
import type { BaseITask, IQueue, IWorker, ThemeProps } from "../../utils";
import { TaskContextProps } from "../BaseTaskDetailsPanel";
export interface TransferClickPayload {
    mode: "WARM" | "COLD";
}
export interface BaseWorkerDirectoryTabsProps {
    isWarmTransferEnabled: boolean;
    hiddenWorkerFilter?: string;
    hiddenQueueFilter?: string;
}
export interface WorkerDirectoryTabsProps extends BaseWorkerDirectoryTabsProps, TaskContextProps {
    queueFilter?: (queue: TaskRouterTaskQueue) => boolean;
    onTransferToQueueClick: (queue: IQueue) => (transferOptions: TransferClickPayload) => void;
    fetchWorkers: (search?: string) => Promise<void>;
    fetchQueues: (search?: string) => void;
    handleTransfer: (notes: string) => void;
    transferStarted: boolean;
    isNotesFFEnabled?: boolean;
    onTransferToWorkerClick: (worker: IWorker) => (transferOptions: TransferClickPayload) => void;
    isDigitalTransfersEnabled?: boolean;
    icon?: ElementType;
    onDial: (phoneNumber: string) => void;
    isExternalTransferLoading: boolean;
    setError: (error: unknown, message: string) => void;
    handleTabClick?: (tabIndex: number, tabName: string) => void;
    workers: IWorker[];
    queues: IQueue[];
    isWorkerLoading: boolean;
    isQueueLoading: boolean;
    outboundCallFlow: OutboundFlows;
}
export declare enum BaseWorkerDirectoryTabsChildrenKeys {
    tabs = "tabs",
    workers = "workers",
    workersContainer = "workers-container",
    workersInputContainer = "workers-input-container",
    workersInputField = "workers-input-field",
    queues = "queues",
    queuesContainer = "queues-container",
    queuesInputContainer = "queues-input-container",
    queuesInputField = "queues-input-field",
    directory = "directory",
    directoryContainer = "directory-container",
    itemContainer = "item-container"
}
export declare enum BaseWorkerDirectoryChildrenKeys {
    header = "header",
    tabs = "tabs"
}
export interface BaseWorkerDirectoryProps extends ThemeProps {
}
export interface BaseWorkerDirectoryChildrenProps {
    isOpen?: boolean;
    isWarmTransferEnabled?: boolean;
}
export interface WorkerDirectoryChildrenProps extends BaseWorkerDirectoryChildrenProps, BaseWorkerDirectoryProps {
    task?: BaseITask;
}
