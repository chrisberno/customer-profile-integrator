import * as React from "react";
import { CSSProps } from "../../utils/theme";
import { TabsThemeProps } from "../../utils/theme/emotion";
import { ButtonThemeProps } from "../Button";
import { Alignments } from "./BaseTabHeader.Components";
export interface BaseTabsState {
    lastSelectedTabIndex: number;
}
/**
 * @typedef Theme.TabsThemeProps
 * @property {CSSProps} Container - Styles for the tabs container
 * @property {CSSProps} LabelsContainer - Styles for the container for the tab header labels
 * @property {ButtonThemeProps} Button - Styles for the icon based tab headers
 * @property {CSSProps} Active - Styles for the active tab header container
 * @property {CSSProps} Inactive - Styles for the inactive tab header container
 * @property {CSSProps} LabelActive - Styles for the active tab label
 * @property {CSSProps} LabelInactive - Styles for the inactive tab label
 * @since 2.0.0
 */
export interface BaseTabsThemeProps {
    Container: CSSProps;
    LabelsContainer: CSSProps;
    Button: ButtonThemeProps;
    Active: CSSProps;
    Inactive: CSSProps;
    LabelActive: CSSProps;
    LabelInactive: CSSProps;
}
/**
 * @callback TabSelectedFunction
 * @param {string} tabName uniqueName of selected Tab
 * @returns {void}
 * @memberof Tabs
 * @private
 * @since 2.0.0
 */
export type TabSelectedFunction = (tabName: string) => void;
export interface BaseTabsProps {
    className?: string;
    alignment: Alignments;
    selectedTabName?: string;
    onTabSelected?: TabSelectedFunction;
    noLabelPadding?: boolean;
    keepTabsMounted: boolean;
    themeOverride?: Partial<TabsThemeProps>;
    ref?: React.RefObject<any>;
    removeLabelForSingleTab?: boolean;
    fullWidthUnderline?: boolean;
}
export interface TabsProps extends BaseTabsProps {
    handleTabClick?: (tabIndex: number, tabName: string) => void;
    icon?: React.ElementType;
}
export declare class BaseTabs extends React.Component<TabsProps, BaseTabsState> {
    static defaultProps: {
        alignment: string;
        keepTabsMounted: boolean;
        removeLabelForSingleTab: boolean;
    };
    state: {
        lastSelectedTabIndex: number;
    };
    private isChildTabVisible;
    private getFirstVisibleTabIndex;
    render(): JSX.Element;
    private handleTabClick;
}
