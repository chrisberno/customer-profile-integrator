import * as React from "react";
export type Alignments = "left" | "center";
export interface BaseTabHeaderProps {
    isActive?: boolean;
    setActive?: Function;
    label?: string | React.ReactNode;
    alignment: Alignments;
    icon?: string | React.ReactNode;
    iconActive?: string | React.ReactNode;
    showIcon?: boolean;
    ["data-testid"]?: string;
    fullWidthUnderline?: boolean;
    tooltip?: string;
}
export type TabHeaderSubProps = Pick<BaseTabHeaderProps, "isActive">;
interface TabHeaderContainerProps {
    alignment: Alignments;
    fullWidthUnderline?: boolean;
}
export declare const TabHeaderContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
} & TabHeaderContainerProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const TabHeaderIndicatorContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
} & TabHeaderSubProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
interface TabLabelProps {
    isActive: boolean;
    onClick: () => {};
}
export declare const TabLabel: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
} & TabLabelProps, React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, {}>;
export declare const IconWrapper: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme;
    as?: React.ElementType;
}, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export {};
