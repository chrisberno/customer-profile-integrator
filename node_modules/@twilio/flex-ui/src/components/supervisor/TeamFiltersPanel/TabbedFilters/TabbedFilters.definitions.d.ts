import { FilterDefinition } from "../../../../flex-ui-core/src";
import { AppliedFilter, Teams } from "../../../../state/Supervisor/SupervisorState.definitions";
import { FilterData } from "../TeamFiltersPanel.definitions";
import { WorkerListFilter } from "../../WorkersDataTable/WorkersDataTable.definitions";
import { SupervisorWorkerState } from "../../../../state/State.definition";
import { metricDataType } from "../AgentMetricsTab/AgentMetricsTab.definitions";
export interface TabbedFiltersProps {
    workers: SupervisorWorkerState[];
    applyFilters: (data?: FilterData, legacyFilterQuery?: string, selectedTeams?: string[]) => void;
    legacyFilters: WorkerListFilter[] | undefined;
    filters: FilterDefinition[];
    appliedFilters: AppliedFilter[];
    appliedLegacyFilterQuery: string;
    isLoadingWorkers: boolean;
    isAgentFiltersEnabled: boolean;
    isNewTeamsViewEnabled: boolean;
    isQueuesColumnEnabled: boolean;
    getSimplifiedFiltersMap: (appliedFiltersFromState: Array<AppliedFilter>) => FilterData;
}
export interface TabbedFiltersImplProps extends TabbedFiltersProps {
    selectedTeams: string[];
    teams: Teams[] | null | undefined;
    agentMetricsColumnsPreference: metricDataType[];
    isGraphQLPreferenceEnabled?: boolean;
    preferenceHooks?: {
        createFlexUserPreference: (input: {
            variables: {
                input: {
                    preferenceKey: string;
                    preferenceValue: string;
                    flexUserSid: string;
                };
            };
        }) => Promise<any>;
        fetchPreferences: (input: {
            variables: {
                input: {
                    preferenceKey: string;
                    flexUserSid: string;
                };
            };
        }) => Promise<{
            data: {
                flexUserPreference: {
                    preferenceValue: any;
                };
            };
        }>;
    };
}
