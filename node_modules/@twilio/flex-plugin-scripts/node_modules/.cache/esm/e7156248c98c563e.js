'use strict';;let utils,bind,Axios,mergeConfig,defaults,formDataToJSON,CanceledError,CancelToken,isCancel,VERSION,toFormData,AxiosError,spread,isAxiosError,AxiosHeaders,adapters,HttpStatusCode;_c98‍.x([["default",()=>_c98‍.o]]);_c98‍.w("./utils.js",[["default",["utils"],function(v){utils=v}]]);_c98‍.w("./helpers/bind.js",[["default",["bind"],function(v){bind=v}]]);_c98‍.w("./core/Axios.js",[["default",["Axios"],function(v){Axios=v}]]);_c98‍.w("./core/mergeConfig.js",[["default",["mergeConfig"],function(v){mergeConfig=v}]]);_c98‍.w("./defaults/index.js",[["default",["defaults"],function(v){defaults=v}]]);_c98‍.w("./helpers/formDataToJSON.js",[["default",["formDataToJSON"],function(v){formDataToJSON=v}]]);_c98‍.w("./cancel/CanceledError.js",[["default",["CanceledError"],function(v){CanceledError=v}]]);_c98‍.w("./cancel/CancelToken.js",[["default",["CancelToken"],function(v){CancelToken=v}]]);_c98‍.w("./cancel/isCancel.js",[["default",["isCancel"],function(v){isCancel=v}]]);_c98‍.w("./env/data.js",[["VERSION",["VERSION"],function(v){VERSION=v}]]);_c98‍.w("./helpers/toFormData.js",[["default",["toFormData"],function(v){toFormData=v}]]);_c98‍.w("./core/AxiosError.js",[["default",["AxiosError"],function(v){AxiosError=v}]]);_c98‍.w("./helpers/spread.js",[["default",["spread"],function(v){spread=v}]]);_c98‍.w("./helpers/isAxiosError.js",[["default",["isAxiosError"],function(v){isAxiosError=v}]]);_c98‍.w("./core/AxiosHeaders.js",[["default",["AxiosHeaders"],function(v){AxiosHeaders=v}]]);_c98‍.w("./adapters/adapters.js",[["default",["adapters"],function(v){adapters=v}]]);_c98‍.w("./helpers/HttpStatusCode.js",[["default",["HttpStatusCode"],function(v){HttpStatusCode=v}]]);



















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new Axios(defaultConfig);
  const instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData;

// Expose AxiosError class
axios.AxiosError = AxiosError;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread;

// Expose isAxiosError
axios.isAxiosError = isAxiosError;

// Expose mergeConfig
axios.mergeConfig = mergeConfig;

axios.AxiosHeaders = AxiosHeaders;

axios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = adapters.getAdapter;

axios.HttpStatusCode = HttpStatusCode;

axios.default = axios;

// this module should only have a default export
_c98‍.d(axios);
